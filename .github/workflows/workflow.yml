name: Dehancer-CLI's pipeline
on: push
jobs:

  Check-code-style-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Install dependencies
        run: |
          poetry install
      - name: Run linter and code formatter
        run: |
          poetry run ruff check . --output-format=github
        continue-on-error: true

  Run-unit-tests:
    needs: [ Check-code-style-and-format ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Install dependencies
        run: |
          poetry install
      - name: Run unit tests with coverage calculation
        run: |
          pytest_output=$(poetry run pytest --cov=src/ -m "unit" || true)
          echo $pytest_output
          total_coverage=$(echo "$pytest_output" | grep 'TOTAL' | awk '{print $NF}' | sed 's/%//')
          printf "Total unit test coverage is %s%%\n" "$total_coverage"
          mkdir -p badges/unit-test
          poetry run anybadge --value=$total_coverage --file=badges/unit-test/unit-test-coverage.svg coverage
      - name: Upload unit test coverage badge as artifact
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage-badge
          path: badges/unit-test/unit-test-coverage.svg

  Run-e2e-tests:
    needs: [ Check-code-style-and-format ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Install dependencies
        run: |
          poetry install
      - name: Run e2e tests
        run: |
          poetry run pytest -m "e2e"

  Check-for-vulnerabilities:
    needs: [ Run-unit-tests ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Install dependencies
        run: |
          poetry install
      - name: Run Snyk to check for vulnerabilities
        id: snyk
        uses: snyk/actions/python-3.12@master
        env:
          SNYK_TOKEN: ${{secrets.SNYK_TOKEN}}
      - name: Check Snyk result and make a badge
        run: |
          if [ "${{ steps.snyk.outcome }}" == "success" ]; then
            badge_color="green"
          else
            badge_color="red"
          fi
          mkdir -p badges/vulnerabilities
          poetry run anybadge --label "vulnerabilities | snyk" --value=tested --file=badges/vulnerabilities/vulnerabilities-snyk-result.svg tested=$badge_color
      - name: Upload vulnerabilities status badge as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vulnerabilities-status-badge
          path: badges/vulnerabilities/vulnerabilities-snyk-result.svg

  Build-executable-files:
    needs: [ Check-for-vulnerabilities ]
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Install dependencies
        run: |
          poetry install
      - name: Build executable file
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: dehancer-cli.py
          output-file: dehancer-cli
          onefile: true
      - name: Get application build version
        id: get-build-version
        run: |
          app_version=$(python -c "import re; file = open('src/__init__.py').read(); print(re.search(r'app_version\s*=\s*\"(.*?)\"', file).group(1))")
          echo "app_build_version=$app_version" >> $GITHUB_ENV
      - name: Get OS version (Linux)
        if: runner.os == 'Linux'
        id: get-os-version-linux
        run: |
          echo "runner_os_version=$(lsb_release -r | awk '{print $2}')" >> $GITHUB_ENV
      - name: Get OS version (macOS)
        if: runner.os == 'macOS'
        id: get-os-version-macos
        run: |
          echo "runner_os_version=$(sw_vers -productVersion)" >> $GITHUB_ENV
      - name: Get OS version (Windows)
        if: runner.os == 'Windows'
        id: get-os-version-windows
        run: |
          echo "runner_os_version=$(cmd /c ver | findstr /C:"Microsoft" | sed 's/.*\[//;s/\].*//')" >> $GITHUB_ENV
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build ${{ env.app_build_version }} for ${{ runner.os }} ${{ env.runner_os_version }}
          path: |
            build/dehancer-cli.exe
            build/dehancer-cli

  Publish-badges:
    needs: [ Run-unit-tests, Check-for-vulnerabilities, Build-executable-files ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download unit test coverage badge
        uses: actions/download-artifact@v4
        with:
          name: unit-test-coverage-badge
          path: badges/unit-test
      - name: Download vulnerabilities status badge
        uses: actions/download-artifact@v4
        with:
          name: vulnerabilities-status-badge
          path: badges/vulnerabilities
      - name: Publish all badges to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: badges